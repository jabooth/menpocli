#!/usr/bin/env python
# encoding: utf-8
"""Perform facial landmark localization using menpofit

Usage:
  menpofit <path>...
  menpofit (-h | --help)
  menpofit --version

Options:
  <path>       Perform landmark localization on all images found at path
  -h --help    Show this screen.
  --version    Show version.
"""
from docopt import docopt
import numpy as np

import menpo.io as mio
from menpo.visualize import print_progress

from menpodetect import load_dlib_frontal_face_detector
import menpofit  # needed for version
from menpofit.aam import load_balanced_frontal_face_fitter

from menpocli.io import resolve_importable_paths, save_pointcloud_as_landmark


def prepare_img_for_fit(img):
    new_img = img.copy()
    new_img.pixels = np.array(new_img.pixels, dtype=np.float) * (1.0 / 255.0)
    if new_img.n_channels == 3:
        new_img = new_img.as_greyscale(mode='luminosity')
    return new_img


def detect_and_fit_images(detector, fitter, img_paths):
    for img_path in print_progress(img_paths):
        img = mio.import_image(img_path, normalize=False)
        bboxes = detector(img)
        for i, bbox in enumerate(bboxes):
            fr = fitter.fit_from_bb(prepare_img_for_fit(img), bbox)
            save_pointcloud_as_landmark(img_path, i, fr.final_shape)

if __name__ == '__main__':
    a = docopt(__doc__,
               version='menpofit v{}'.format(menpofit.__version__))
    print('\nM E N P O F I T  ' + 'v' + menpofit.__version__ + '\n')
    detector = load_dlib_frontal_face_detector()
    fitter = load_balanced_frontal_face_fitter()
    image_paths = resolve_importable_paths(a['<path>'])
    detect_and_fit_images(detector, fitter, image_paths)
