#!/usr/bin/env python
# encoding: utf-8
"""Perform facial landmark localization using menpofit

Usage:
  menpofit <path>...
  menpofit (-h | --help)
  menpofit --version

Options:
  <path>       Perform landmark localization on all images found at path
  -h --help    Show this screen.
  --version    Show version.
"""
from docopt import docopt
import numpy as np

import menpo.io as mio
from menpo.visualize import print_progress
from menpodetect import load_dlib_frontal_face_detector
import menpofit  # needed for version

from menpocli import MENPO_SERVER_URL
from menpocli.config import (resolve_cache_dir, save_cache_dir,
                             user_settings_path, DEFAULT_CACHE_DIR)
from menpocli.exception import MissingConfigKeyError
from menpocli.io import resolve_importable_paths, save_pointcloud_as_landmark
from menpocli.utils import create_path, download_file, norm_path


@create_path
def menpofit_cache_dir(cache_dir):
    return cache_dir / 'menpofit'


def fitter_path(cache_dir, version):
    return menpofit_cache_dir(cache_dir) / '{}_fitter.pkl'.format(version)


def fitter_url(version):
    return MENPO_SERVER_URL + 'menpofit/{}/fitter.pkl'.format(version)


def cache_and_load_fitter(cache_dir, version):
    fitter_p = fitter_path(cache_dir, version)
    if fitter_p.exists():
        return mio.import_pickle(fitter_p)
    else:
        print('Need to cache fitter for menpofit {}'.format(version))
        url = fitter_url(version)
        download_file(url, fitter_p)
        # recurse, we will now have the fitter available.
        return cache_and_load_fitter(cache_dir, version)


def prepare_img_for_fit(img):
    new_img = img.copy()
    new_img.pixels = np.array(new_img.pixels, dtype=np.float) * (1.0 / 255.0)
    if new_img.n_channels == 3:
        new_img = new_img.as_greyscale(mode='luminosity')
    return new_img


def detect_and_fit_images(detector, fitter, img_paths):
    for img_path in print_progress(img_paths):
        img = mio.import_image(img_path, normalise=False)
        bboxes = detector(img)
        for i, bbox in enumerate(bboxes):
            fr = fitter.fit_from_bb(prepare_img_for_fit(img), bbox)
            save_pointcloud_as_landmark(img_path, i, fr.final_shape)


CACHE_MESSAGE = '''
Menpo needs a cache directory on your machine that can be used for storing
deformable models downloaded from the Menpo server. Downloaded files may
be a few gigabytes in size, so you should choose a cache location that is
on a file system with a large amount of free storage (>10GB).

By default, we suggest using {}

  - Press ENTER to confirm the location
  - Press CTRL-C to abort
  - Or specify a different location below
'''.format(DEFAULT_CACHE_DIR)

CACHE_SET_MESSAGE = '''

Your cache directory has been set to:

{}

Your preference has been stored in your Menpo user settings at:

{}

Edit this file if you wish to change your cache directory in the
future.

Rerun this command again to start using menpofit!
'''

if __name__ == '__main__':
    a = docopt(__doc__,
               version='menpofit v{}'.format(menpofit.__version__))
    print('\nM E N P O F I T  ' + 'v' + menpofit.__version__ + '\n')
    try:
        cache_dir = resolve_cache_dir()
    except MissingConfigKeyError as e:
        print(CACHE_MESSAGE)
        user_input = input('[{}] >>> '.format(DEFAULT_CACHE_DIR))
        cache_dir = (norm_path(user_input)
                     if user_input != '' else DEFAULT_CACHE_DIR)
        print(CACHE_SET_MESSAGE.format(cache_dir, user_settings_path()))
        save_cache_dir(cache_dir)
    else:
        print('cache: {}'.format(cache_dir))
        fitter = cache_and_load_fitter(cache_dir, menpofit.__version__)
        image_paths = resolve_importable_paths(a['<path>'])
        detect_and_fit_images(load_dlib_frontal_face_detector(),
                              fitter, image_paths)
