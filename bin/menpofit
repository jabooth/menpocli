#!/usr/bin/env python
# encoding: utf-8
"""Perform facial landmark localization using menpofit

Usage:
  menpofit <path>...
  menpofit (-h | --help)
  menpofit --version

Options:
  <path>       Perform landmark localization on all images found at path
  -h --help    Show this screen.
  --version    Show version.
"""
from os.path import isfile
from pathlib import Path
from docopt import docopt

import menpo.io as mio
from menpo.io.input.base import importer_for_filepath, image_types
from menpo.landmark import LandmarkGroup
from menpo.visualize import print_progress
from menpodetect import load_dlib_frontal_face_detector
import menpofit  # needed for version

from menpocli import MENPO_SERVER_URL
from menpocli.config import (resolve_cache_dir, save_cache_dir,
                             user_settings_path)
from menpocli.exception import MissingConfigKeyError
from menpocli.utils import create_path, download_file, norm_path


@create_path
def menpofit_cache_dir(cache_dir):
    return cache_dir / 'menpofit'


def fitter_path(cache_dir, version):
    return menpofit_cache_dir(cache_dir) / '{}_fitter.pkl'.format(version)


def fitter_url(version):
    return MENPO_SERVER_URL + 'menpofit/{}/fitter.pkl'.format(version)


def cache_and_load_fitter(cache_dir, version):
    fitter_p = fitter_path(cache_dir, version)
    if fitter_p.exists():
        return mio.import_pickle(fitter_p)
    else:
        print('Need to cache fitter for menpofit {}'.format(version))
        url = fitter_url(version)
        download_file(url, fitter_p)
        # recurse, we will now have the fitter available.
        cache_and_load_fitter(cache_dir, version)


def can_import_img(path):
    try:
        importer_for_filepath(path, image_types)
        return True
    except ValueError:
        return False


def preprocess_img(img):
    import numpy as np
    new_img = img.copy()
    new_img.pixels = np.array(new_img.pixels, dtype=np.float) * (1.0 / 255.0)
    if new_img.n_channels == 3:
        new_img = new_img.as_greyscale(mode='luminosity')
    return new_img


def resolve_all_paths(img_paths_or_patterns):
    img_paths = set()
    for img_path_or_pattern in img_paths_or_patterns:
        if not isfile(img_path_or_pattern):
            img_paths.update(set(mio.image_paths(img_path_or_pattern)))
        else:
            img_paths.add(Path(img_path_or_pattern))
    return img_paths


def save_fitting_result_as_landmark(img_path, i, fr):
    lms = LandmarkGroup.init_with_all_label(fr.final_shape)
    name = img_path.stem + ('_' + str(i) if i > 0 else '')
    mio.export_landmark_file(lms,
                             img_path.parent / '{}.pts'.format(name),
                             overwrite=True)


def find_detect_and_fit_images(detector, fitter, img_paths):
    importable_img_paths = set(filter(can_import_img, img_paths))
    non_importable = img_paths - importable_img_paths

    if len(non_importable) > 0:
        missing_str = '\n    ' + '\n    '.join([str(p)
                                                for p in non_importable])
        print('Warning: {} files provided are not '
              'importable by menpo:{}'.format(len(non_importable),
                                              missing_str))
    print('Found {} images that will be '
          'fitted.'.format(len(importable_img_paths)))
    for img_path in print_progress(importable_img_paths):
        img = mio.import_image(img_path, normalise=False)
        bboxes = detector(img)
        for i, bbox in enumerate(bboxes):
            fr = fitter.fit_from_bb(preprocess_img(img), bbox)
            save_fitting_result_as_landmark(img_path, i, fr)


CACHE_MESSAGE = '''
Menpo needs a cache directory on your machine that can be used for storing
deformable models downloaded from the Menpo server. Downloaded files may
be a few gigabytes in size, so you should choose a cache location that is
on a file system with a large amount of free storage (>10GB).
'''

CACHE_SET_MESSAGE = '''
Your cache directory has been set to:
{}

Your preference has been stored in your Menpo user settings at:
{}

Edit this file if you wish to change your cache directory in the
future.

Rerun this command again to start using menpofit!
'''

if __name__ == '__main__':
    a = docopt(__doc__,
               version='menpofit v{}'.format(menpofit.__version__))
    print('\nM E N P O F I T  ' + 'v' + menpofit.__version__ + '\n')
    try:
        cache_dir = resolve_cache_dir()
    except MissingConfigKeyError as e:
        print(CACHE_MESSAGE)
        cache_dir = norm_path(input('Menpo cache dir: '))
        print(CACHE_SET_MESSAGE.format(cache_dir, user_settings_path()))
        save_cache_dir(cache_dir)
    else:
        print('cache: {}'.format(cache_dir))
        fitter = cache_and_load_fitter(cache_dir, menpofit.__version__)
        image_paths = resolve_all_paths(a['<path>'])
        find_detect_and_fit_images(load_dlib_frontal_face_detector(),
                                   fitter, image_paths)
